#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Created on Mon May 2 09:30:21 2016
Utility to generate an annotated PDF from a MIT record

Usage: ./mit2pdf [options]

@author: Ángel Piñeiro Souto
"""

from StringIO import StringIO
from optparse import OptionParser
from matplotlib.backends.backend_pdf import PdfPages
from datetime import datetime, timedelta
import time
import matplotlib.pyplot as plt
import numpy as np
import subprocess
import shlex
import json
import os, sys

QRS_ANNS = ['N', 'L','R','B','A','a','J','S','V','r','F','e','j','n','E','/','f','Q','?']

def run(cmd):
    """
    Runs a command and returns the result as a StrinIO file-like object
    """
    print "  Running $ " +  cmd + " ..."
    args = shlex.split(cmd)
    p = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, err = p.communicate()
    return StringIO(out)

def rdsamp(record):
    """
    Reads data from a MIT record, using rdsamp
    """
    out = run("rdsamp -r "+record+" -c")
    data = np.genfromtxt(out, delimiter=",", usecols=(1, 2))
    return data

def rdann(record,annotators=[], filter=[]):
    """
    Reads annotations from a MIT record, using rdann
    """
    annotations = []
    for annotator in annotators:
        cmd = "rdann -r "+record+" -a "+annotator
        if len(filter):
            cmd += " -p " + (" ".join(filter))
        out = run(cmd)
        anns = [{'sampleNumber': int(a[1]),
                 'type': a[2],
                 'channel': int(a[4]),
                 'aux': a[6] if len(a) > 6 else ""
                } for a in [line.split() for line in out]]

        annotations.extend(anns)
    return annotations

def wfdbdesc(record):
    """
    Get info from a MIT record, using wfdbdesc
    """
    out = run("wfdbdesc "+record)
    info = {'channels':[]}

    for l in out:
        if "Sampling frequency" in l:
            freq = (l.split(":")[1]).replace("Hz","")
            info['freq'] = int(freq)
        elif "Description" in l:
            chan = {'description': (l.split(":")[1]).strip()}
        elif "Gain" in l:
            chan['gain'] = int((l.split(" ")[2]).strip())
            info['channels'].append(chan)
    return info

def sampleValue(position, channel=0):
    return recordData[position][channel]

def plotEcgPage(recordData, annotations, header, filter, samples, offset=0,lastDrawn=0, pdf=None):
    """
    Plot a page of signal with annotations
    """
    data = []
    for i in xrange(offset, offset + samples):
        data.extend(recordData[i])
    if not len(data):
         return

    padding = 3

    dataRange = recordData.max() - recordData.min() if options.sameScale else max(data) - min(data)
    dataRange = max(dataRange,4)

    for i in range(channels):

        channelData = data[i::channels]
        dataMin = min(channelData);
        dataMax = max(channelData);
        channelCenter = dataMin + (dataMax-dataMin)/2
        yAxInit = channelCenter - dataRange/2 - dataRange/6
        yAxEnd = channelCenter + dataRange/2 + dataRange/6

        if pdf is not None:
            fig = plt.gcf()
            fig.set_size_inches(float(options.pageSize)*2.4+2*padding, max(dataRange*0.75,5)*channels)
        sp = plt.subplot(channels, 1, i + 1)
        sp.get_yaxis().set_visible(True)
        sp.get_xaxis().set_visible(False)
        sp.set_xlim(axInit, axEnd)
        sp.set_ylim(yAxInit, yAxEnd)
        sp.axis('off')
        if showGrid:
            plotGrid(yAxEnd,yAxInit)
        sp.plot(channelData, linewidth=0.7, color="blue")
        plotAnnotations(annotations,header,filter,offset, i, channelData, lastDrawn,yAxInit,yAxEnd,dataRange)

    plt.tight_layout(pad=padding)
    fromStr =  str(timedelta(seconds=int(offset/header['freq'])))
    toStr = str(timedelta(seconds=int((offset + len(data) / channels)/header['freq'])))
    plt.suptitle('Record '+ recordName +' - ' + fromStr + " to " + toStr + ("  [ 1 square = 0.04sec/0.1mV ]" if showGrid else ""))
    fig.savefig(pdf, format='pdf', dpi=600)
    plt.close()


def plotAnnotations(annotations, header,filter, offset, channel, data, lastDrawn,yAxInit,yAxEnd,dataRange):
    """
    Plot annotations
    """
    minSample = offset
    maxSample = offset + len(data)
    top = yAxEnd
    bottom = yAxInit
    plt.text(-60, yAxInit + (yAxEnd-yAxInit)/2 , header['channels'][channel]['description'], color='black',fontsize=16)
    for annotation in annotations[lastDrawn:len(annotations)]:
        if (not filter or annotation['type'] in filter) and annotation['sampleNumber'] > minSample:
            if annotation['sampleNumber'] < maxSample :
                plotAnnotaion(annotation, offset, top, bottom, channel)
            else:
                break
        lastDrawn+=1

def plotAnnotaion(a, offset, top, bottom, channel):
    """
    Plot an annotation
    """
    color = "green" if a['aux'] == "p" else "brown" if a["aux"] == "t" else "black"
    textcolor= "black"
    position = a["sampleNumber"]
    sampVal = sampleValue(position, channel)

    tp = top - (top-bottom)/6    # at the top
    bt = bottom + (top-bottom)/9 # at the bottom of the grid
    sb = bottom - (top-bottom)/12 # below grid

    # beat annotations
    if a['type'] in QRS_ANNS:
        plt.axvline(x=position - offset, color='black', linestyle="dashed", lw=0.8, alpha=0.8)
        plt.text(position - offset + 10, tp, a['type'], color='black',fontsize=14, fontweight="bold")
        plt.text(position - offset + 5, sb, str(position), color='grey',fontsize=8)
    # wave start and end annotations
    elif a['type'] in [ "(", ")"] and a["channel"] == channel:
        x = position - offset
        x2 = x + (2 if a["type"] == "(" else -2)
        y0 = sampVal - 0.2
        y1 = sampVal + 0.2
        plt.plot([x,x],[y0,y1], linestyle='-', lw=1, color=color)
        plt.plot([x,x2],[y0,y0], linestyle='-', lw=1, color=color)
        plt.plot([x,x2],[y1,y1], linestyle='-', lw=1, color=color)
        if a["aux"] in ["q","s"]:
            plt.text(position - offset - (1000/freq) - (6 if a["aux"] == "q" else -6), sampVal-0.1  , a["aux"], fontsize=12, color=color, alpha=1)
    # p and t peaks
    elif a['type'] in [ 'p', 't'] and a["channel"] == channel :
        x = position - offset
        y0 = sampVal - 0.2
        y1 = sampVal + 0.2
        plt.plot([x,x],[y0,y1], linestyle='-', lw=1, color=color)
        plt.text(position - offset - (1000/freq) - 2, sampVal+0.3 ,a['type'], fontsize=12, color=textcolor,alpha=1)
    # r peak (aux = 'r')
    elif a["aux"] == "r" and a["channel"] == channel:
        plt.plot([position - offset], [sampVal], 'o', color=color, ms=1.5)
        plt.text(position - offset - (1000/freq)-5, sampVal , a["aux"], fontsize=11, color=color,alpha=1)
    # rest of annotations
    else:
        textUp = a["type"]
        textDown = a["aux"] if a["aux"] else ""
        x = position - offset
        plt.axvline(x=position - offset, ymin=0.05, ymax=0.2, color='green', linestyle="-", lw=1.5, alpha=1)
        plt.axvline(x=position - offset, ymin=0.8, ymax=0.95, color='green', linestyle="-", lw=1.5, alpha=1)
        plt.text(position - offset, tp, " " + textUp, color='black',fontsize=16)
        plt.text(position - offset, bt, " " + textDown, color='black',fontsize=16)

def plotGrid(top, bottom):
    """
    Plot grid
    """
    pageWidthInSeconds = (pageSize/freq)
    numberOfLines = pageWidthInSeconds*25

    # vertical grid lines
    for i in xrange(1,numberOfLines+1):
        plt.axvline(x=i*pageSize/numberOfLines, color='red', lw=0.1, alpha=.3 if i%5==0 else 0.1)

    # horizontal grid lines
    for i in xrange(int(bottom*10-1),int(top*10+1)):
        plt.axhline(y=float(i)/10, color='red', lw=0.1, alpha=.3 if i%5==0 else 0.1)

# Print iterations progress
def printProgress (iteration, total, prefix = '', suffix = '', decimals = 2, barLength = 100):
    filledLength    = int(round(barLength * iteration / float(total)))
    percents        = round(100.00 * (iteration / float(total)), decimals)
    bar             = '#' * filledLength + '-' * (barLength - filledLength)
    sys.stdout.write('%s [%s] %s%s %s\r' % (prefix, bar, percents, '%', suffix)),
    sys.stdout.flush()
    if iteration >= total:
        print("\n")

#
# Put itall together
#

parser = OptionParser()
parser.add_option("-r", "--record", dest="record", default="", help="Record to print")
parser.add_option("-a", "--annotator", dest="annotator", default="atr", help="Annotator")
parser.add_option("-o", "--offset", dest="offset", default="0", help="Offset to start printing in seconds or as an absolute instant in the format hh:mm:ss (default=0)")
parser.add_option("-l", "--limit", dest="limit", default="", help="Limit to print in seconds or as an absolute instant in the format hh:mm:ss (default=None)")
parser.add_option("-p", "--pageSize", dest="pageSize", default=10, help="Number of seconds per page (default=10)")
parser.add_option("-f", "--filter", dest="filter", default="", help="Filter beat classes shown Ex:N,V")
parser.add_option("-d", "--destination", dest="output", default="ecg.pdf", help="Output file")
parser.add_option("--showSamples", action="store_true", dest="showSamples", help="Show sample numbers")
parser.add_option("--noGrid", action="store_true", dest="noGrid", help="Show grid")
parser.add_option("--sameScale", action="store_true", dest="sameScale", help="Use same scale on all pages (reduces space optimization)")


(options, args) = parser.parse_args()
filter= options.filter.split(",") if options.filter else []
showSamples = options.showSamples
showGrid = False if options.noGrid else True

# get record path from options
record = options.record

if not record:
    parser.print_help()
    sys.exit(1)

recordName = os.path.basename(record)

print "Loading record " + recordName + "..."
# read header info
header = wfdbdesc(record)

if not 'freq' in header.keys():
    print "Unable to find header file for record '" + recordName + "'"
    sys.exit(1)

# number of channels in the input file
channels = len(header["channels"])
freq = header["freq"]

recordData = rdsamp(record)
annotators = options.annotator.split(",")
annotations = rdann(record,annotators,filter)
annotations.sort(key=lambda x: x["sampleNumber"])

gain = header["channels"][0]["gain"]
recordData = recordData / gain
totalSamples = len(recordData)
samplesPerLead = totalSamples

if ":" in options.offset:
    t = datetime.strptime(options.offset,"%H:%M:%S")
    secs = timedelta(hours=t.hour, minutes=t.minute, seconds=t.second).total_seconds()
    offset = int(secs*freq)
else:
    offset=int(options.offset)*freq

if not options.limit:
    limit = totalSamples
elif ":" in options.limit:
    t = datetime.strptime(options.limit,"%H:%M:%S")
    secs = timedelta(hours=t.hour, minutes=t.minute, seconds=t.second).total_seconds()
    limit = int(secs*freq-offset)
else:
    limit=int(options.limit)*freq

samples = min(samplesPerLead, offset + limit) if limit > 0 else samplesPerLead
pageSize = int(options.pageSize)*freq

start = offset
axEnd = pageSize
axInit = 0
pages = limit / pageSize
print "Read " + str(len(recordData)) + " samples"
print "Read " + str(len(annotations)) + " annotations"
print "Generating PDF (" + str(pages) + " pages) " + ( " [Use --limit to print only a record fragment]" if not options.limit else "...")


totalTime = 0
lastDrawn=0
pdf = PdfPages(options.output)
# iterate and print pages
currentPage = 1
while start < samples:
    if start + pageSize > samples:
        pageSize = samples - start
    start_time = time.time()
    plotEcgPage(recordData, annotations, header, filter, pageSize,start, lastDrawn, pdf)
    elapsed_time = time.time() - start_time
    totalTime += elapsed_time;
    remaining = timedelta(seconds= totalTime/currentPage * (pages-currentPage));
    formattedTd = str(remaining).split('.')[0]
    printProgress(currentPage, pages, prefix = 'Progress:', suffix = 'Complete. ' + formattedTd + " remaining.", barLength = 50)
    start = start + pageSize
    currentPage+=1
pdf.close()

print "Done. Check " + options.output
